load("@prelude//paths.bzl", "paths")
load("@prelude//third-party:pkgconfig.bzl", "external_pkgconfig_library")

load(":defs.bzl", "subpath_ref_export_files", "tf_default_shared_deps", "constraint_boolean", "select_has")
load("@tf//build_defs:configure_define.bzl", "configure_define")


external_pkgconfig_library(name = "gtk+-3.0")
external_pkgconfig_library(name = "libudev")
external_pkgconfig_library(name = "x11")
external_pkgconfig_library(name = "xrandr")

export_file(
    name = "fsl",
    mode = "reference",
    src = "Common_3/Tools/ForgeShadingLanguage/fsl.py",
    visibility = ["PUBLIC"],
)

export_file(
    name = "UI_ShaderList",
    mode = "reference",
    src = "Resources/UI/Shaders/FSL/UI_ShaderList.fsl",
    visibility = ['PUBLIC']
)

export_file(
    name = "Font_ShaderList",
    mode = "reference",
    src = "Resources/Fonts/Shaders/FSL/Fonts_ShaderList.fsl",
    visibility = ['PUBLIC']
)

subpath_ref_export_files("Resources/GPUData", [
  "pc_gpu.data",
  "steamdeck_gpu.data",
  "apple_gpu.data",
  "android_gpu.data"
])

configure_define(
  name = "TF_Config",
  file = "TF_Config.in",
  out = "TF_Config.h",
  variables = {
    "LOG_LEVEL": read_config("tf", "log-level", "eAll")
  },
  feature = {
      "TF_ENABLE_MEMORY_TRACKING": read_config("tf", "memory-tracking", "0") == "1",
      "TF_FEATURE_D3D12": select_has(["tf_platform//D3D12:supported"]),
      "TF_FEATURE_D3D11": select_has(["tf_platform//D3D11:supported"]),
      "TF_FEATURE_VULKAN": select_has(["tf_platform//VULKAN:supported"]),
      "TF_TARGET_WIN11": select_has(["tf_platform//target:win11"]),
      "TF_TARGET_LINUX": select_has(["tf_platform//target:linux"]),
      "TF_DEBUG": select_has(["tf_platform//build:debug"]),
      "TF_ENABLE_LOGGING": True 
  }
)

cxx_library(
  name = "TF~GLTF",
  exported_headers = { 
    "Forge/Formats/TF_gltf.h":"Formats/TF_gltf.h" 
  },
  deps = [
      "@tf//3rdparty:cgltf",
      "@tf//:TF"
  ],
  srcs = ["Formats/TF_gltf.c"],
  link_style = "static",
  visibility = ["PUBLIC"],
)

cxx_library(
    name = "TF",
    srcs = glob([
      "Common_3/Graphics/*.cpp",
      "Common_3/Application/*.cpp",
      "Common_3/Application/Profiler/*.cpp",
      "Common_3/Application/Fonts/FontSystem.cpp",
      "Common_3/Application/UI/UI.cpp",
      "Common_3/Application/Profiler/*.cpp",
      "Common_3/Application/InputSystem.cpp",
      "Common_3/OS/WindowSystem/*.cpp",
      "Common_3/OS/*.cpp",
      "Common_3/Resources/ResourceLoader/*.cpp",

      "Common_3/Utilities/FileSystem/FileSystem.c",
      "Common_3/Utilities/FileSystem/SystemRun.c",
      "Common_3/Utilities/Log/*.c",
      "Common_3/Utilities/Math/*.c",
      "Common_3/Utilities/MemoryTracking/*.c",
      "Common_3/Utilities/Threading/*.c",
      "Common_3/Utilities/*.c",

      "Common_3/Tools/Network/*.c",
      "Common_3/Tools/ReloadServer/*.cpp",

      "Common_3/Renderer/ShaderServer/Network.c",
      "Common_3/Renderer/ShaderServer/ShaderServer.cpp",

      "Common_3/Utilities/ThirdParty/OpenSource/bstrlib/bstrlib.c",
      "Common_3/Tools/ThirdParty/OpenSource/meshoptimizer/src/*.cpp",

      "Core/TF_String.cpp",
      "Core/TF_Core.cpp",
      "Core/Mem/TF_Allocators.cpp",

      # lz4 
      "Common_3/Utilities/ThirdParty/OpenSource/lz4/lz4.c",
      "Common_3/Utilities/ThirdParty/OpenSource/lz4/lz4hc.c",
       
      # ga input 
      "Common_3/Application/ThirdParty/OpenSource/gainput/lib/source/gainput/*.cpp",
      "Common_3/Application/ThirdParty/OpenSource/gainput/lib/source/gainput/builtin/*.cpp",
      "Common_3/Application/ThirdParty/OpenSource/gainput/lib/source/gainput/dev/*.cpp",
      "Common_3/Application/ThirdParty/OpenSource/gainput/lib/source/gainput/gestures/*.cpp",
      "Common_3/Application/ThirdParty/OpenSource/gainput/lib/source/gainput/keyboard/*.cpp",
      "Common_3/Application/ThirdParty/OpenSource/gainput/lib/source/gainput/mouse/*.cpp",
      "Common_3/Application/ThirdParty/OpenSource/gainput/lib/source/gainput/pad/*.cpp",
      "Common_3/Application/ThirdParty/OpenSource/gainput/lib/source/gainput/recorder/*.cpp",
      "Common_3/Application/ThirdParty/OpenSource/gainput/lib/source/gainput/touch/*.cpp",
      "Common_3/Application/ThirdParty/OpenSource/gainput/lib/source/gainput/hid/*.cpp",   
      "Common_3/Application/ThirdParty/OpenSource/gainput/lib/source/gainput/hid/hidparsers/*.cpp",   

      
      "Common_3/Graphics/*.cpp",
      "Graphics/*.cpp",
      "Mem/*.cpp",
      
      # imgui 
      "Common_3/Application/ThirdParty/OpenSource/imgui/*.cpp",

     "Common_3/Utilities/ThirdParty/OpenSource/zstd/common/*.c",
     "Common_3/Utilities/ThirdParty/OpenSource/zstd/compress/*.c",
     "Common_3/Utilities/ThirdParty/OpenSource/zstd/decompress/*.c"
  ]) + select({
    "tf_platform//VULKAN:supported": glob([
          "Graphics/Vulkan/*.cpp",
          "Graphics/Vulkan/*.c"
    ]),
    "DEFAULT": []
  }) + select({
    "tf_platform//D3D12:supported": glob([
          "Graphics/Direct3D12/*.cpp",
          "Graphics/Direct3D12/*.c",
    ]),
    "DEFAULT": []
  }) + select({
    "tf_platform//D3D12:supported": glob([
          "Graphics/Direct3D11/*.cpp",
          "Graphics/Direct3D11/*.c",
    ]),
    "DEFAULT": []
  }) + select({
        "tf_platform//target:linux": glob([
          "Common_3/Utilities/ThirdParty/OpenSource/zstd/decompress/huf_decompress_amd64.S",
          "Common_3/OS/Linux/*.cpp",
          "Common_3/OS/Linux/*.c",
          "Common_3/Utilities/FileSystem/UnixFileSystem.c",
          "Common_3/Application/ThirdParty/OpenSource/gainput/lib/source/hidapi/linux/*.c"
        ]),
        "tf_platform//target:win11": glob([
          "Common_3/OS/Windows/*.cpp",
          "Common_3/OS/Windows/*.c",
      
          "Common_3/Graphics/Direct3D11/*.cpp",

          "Common_3/Application/ThirdParty/OpenSource/gainput/lib/source/hidapi/windows/*.c",
          "Common_3/Application/ThirdParty/OpenSource/gainput/lib/source/gainput/hid/*.cpp",
          "Common_3/Application/ThirdParty/OpenSource/gainput/lib/source/gainput/hid/hidparsers/*.cpp",
        ])
    }) + [
      "TF_Log.c",
      "TF_String.cpp",
      "Mem/TF_Allocators.cpp"
    ],
    deps = select({
      "tf_platform//target:linux": [
        ":gtk+-3.0",
        ":libudev",
        ":x11",
        ":xrandr"],
      "DEFAULT": [
      ]
    }),
    exported_preprocessor_flags = select({
      "tf_platform//target:win11": [
        "-DD3D12_AGILITY_SDK=1",
        "-DD3D12_AGILITY_SDK_VERSION=611"
      ],
      "DEFAULT": []
    }),
    exported_linker_flags = select({
      "tf_platform//target:win11": [
        "kernel32.lib",
        "user32.lib",
        "gdi32.lib",
        "winspool.lib",
        "comdlg32.lib",
        "advapi32.lib",
        "shell32.lib",
        "ole32.lib",
        "oleaut32.lib",
        "uuid.lib",
        "odbc32.lib",
        "odbccp32.lib",
        "winmm.lib",
        "Xinput.lib"],
      "DEFAULT": []
    }),
    exported_deps = tf_default_shared_deps() +  [
      "@tf//3rdparty:vulkan-header",
      "@tf//3rdparty:cpu_features",
      "@tf//3rdparty:SPIRV-Cross"
    ],
    link_style = "static",
    exported_headers = 
      {
        "Forge/TF_Config.h":":TF_Config",
        "Forge/TF_Types.h":"TF_Types.h",
        "Forge/TF_String.h":"TF_String.h",
        "Forge/Config.h": "Config.h",
        "Forge/TF_FileSystem.h": "TF_FileSystem.h",
        "Forge/TF_Log.h": "TF_Log.h",
        "Forge/TF_Thread.h": "TF_Thread.h",
        "Forge/Graphics/Vulkan/volk/volk.c": "Graphics/Vulkan/volk/volk.c"
      } |
      { file: file for file in glob(["Common_3/**/*.h", "Common_3/**/*.hpp"]) } |
      { paths.join("Forge",file): file for file in glob([
          "Mem/*.h",
          "stb/*.h",
          "Core/**/*.h", 
          "Core/*.h", 
          "System/*.h",

          "Math/*.hpp",
          "Math/**/*.hpp",
          "Math/*.h",
          "Math/**/*.h",
          "Math/**/*.inl",

          "Graphics/*.h",
          "Graphics/**/*.h",
          "Graphics/*.inl",
          "Graphics/**/*.inl" ]) }, 
    visibility = ["PUBLIC"],
)

